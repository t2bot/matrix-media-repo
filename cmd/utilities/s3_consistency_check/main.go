package main

import (
	"errors"
	"flag"
	"os"

	"github.com/dustin/go-humanize"
	"github.com/sirupsen/logrus"
	"github.com/t2bot/matrix-media-repo/common/assets"
	"github.com/t2bot/matrix-media-repo/common/config"
	"github.com/t2bot/matrix-media-repo/common/logging"
	"github.com/t2bot/matrix-media-repo/common/rcontext"
	"github.com/t2bot/matrix-media-repo/common/runtime"
	"github.com/t2bot/matrix-media-repo/common/version"
	"github.com/t2bot/matrix-media-repo/database"
	"github.com/t2bot/matrix-media-repo/datastores"
)

func main() {
	configPath := flag.String("config", "media-repo.yaml", "The path to the configuration")
	datastoreId := flag.String("datastoreId", "", "The datastore ID to check (must be an S3 datastore)")
	outFile := flag.String("outFile", "./s3-probably-safe-to-delete.txt", "File path for where to write results")
	migrationsPath := flag.String("migrations", config.DefaultMigrationsPath, "The absolute path for the migrations folder")
	flag.Parse()

	// Override config path with config for Docker users
	configEnv := os.Getenv("REPO_CONFIG")
	if configEnv != "" {
		configPath = &configEnv
	}

	config.Runtime.IsImportProcess = true // prevents us from creating media by accident
	config.Path = *configPath

	defer assets.Cleanup()
	assets.SetupMigrations(*migrationsPath)

	var err error
	err = logging.Setup(
		config.Get().General.LogDirectory,
		config.Get().General.LogColors,
		config.Get().General.JsonLogs,
		config.Get().General.LogLevel,
	)
	if err != nil {
		panic(err)
	}

	// Limited runtime because we don't need *everything*
	logrus.Info("Starting up...")
	version.Print(true)
	runtime.LoadDatabase()
	runtime.LoadDatastores()

	ctx := rcontext.Initial()
	ds, ok := datastores.Get(ctx, *datastoreId)
	if !ok {
		panic(errors.New("datastore not found"))
	}
	if ds.Type != "s3" {
		panic(errors.New("datastore is not an S3 datastore"))
	}

	mediaDb := database.GetInstance().Media.Prepare(ctx)
	thumbsDb := database.GetInstance().Thumbnails.Prepare(ctx)

	logrus.Info("Scanning datastore for unreferenced media")
	ch, err := datastores.ListS3Files(ctx, ds)
	unreferenced := make([]string, 0)
	totalBytes := int64(0)
	if err != nil {
		panic(err)
	}
	var exists bool
	for object := range ch {
		logrus.Debugf("Checking %s against media tables", object.Key)
		exists, err = mediaDb.LocationExists(ds.Id, object.Key)
		if err != nil {
			panic(err)
		}
		if exists {
			continue
		}

		exists, err = thumbsDb.LocationExists(ds.Id, object.Key)
		if err != nil {
			panic(err)
		}
		if exists {
			continue
		}

		unreferenced = append(unreferenced, object.Key)
		totalBytes += object.Size
		logrus.Infof("%s is probably safe to delete (not referenced by this media repo config)", object.Key)
	}

	logrus.Infof("Found %d potentially removable objects in S3 (%d bytes | %s)", len(unreferenced), totalBytes, humanize.Bytes(uint64(totalBytes)))

	if len(unreferenced) > 0 {
		logrus.Warn("Note that object IDs generated by this script may include media uploads in progress. Re-run this " +
			"script in 15-30 minutes and compare results to verify in-flight media was not captured.")
	}

	f, err := os.Create(*outFile)
	if err != nil {
		panic(err)
	}
	for _, id := range unreferenced {
		_, err = f.WriteString(id + "\n")
		if err != nil {
			panic(err)
		}
	}
	err = f.Close()
	if err != nil {
		panic(err)
	}
	logrus.Info("Done!")
}
